Minimum Requirements explanation

1. One of the following application types: mobile, web, or stand-alone application

		> Application is a web application
		
2.	Code including inheritance, polymorphism, and encapsulation

		> Inheritance - demonstrated through the use of an base AbstractReport class and child classes RecipeReportBean and UserReportBean
		> Polymorphism - demonstrated widely throughout through the use of EJB service interfaces and concrete implementations. One such example would be using the 
						 RegisterService interface to refer to a RegisterServiceImplementation concrete class object
		> Encapsulation - demonstrated widely throughout through the use of JSF named beans and Hibernate entity objects. One such example would be JSF RegisterBean
						with its private instance variables and public getters/setters.
						
3.	Search functionality with multiple row results and displays
		
		>This is implemented through a search bar that allows the user to search for recipes by keyword
		
4.	A database component with the functionality to securely add, modify, and delete the data
		
		>This CRUD functionality is implemented by the following:
			
			>Create (Add) - demonstrated through the use of a register component that allows users to create or add data
			>Read - demonstrated through the use of a login component that reads users account data
			>Update (Modify) demonstrated through the use of a profile picture component that allows users to change or modify their profile picture
			>Delete - demonstrated through the use of a delete account function that allows users to delete their user account
			
5.  Ability to generate reports with multiple columns, multiple rows, date-time stamp, and title

		>This functionality is available to administrator users on the reports.xhtml page. Currently two reports are available that contain muliple columns,
			rows, date-time stamps, and titles (Only one report meets all the mentioned criteria).
				
6.	Exception controls
			
		>This is implemented througout as some methods will throw exceptions and be handled either with a try catch or by the default JVM 'throws' exception handling
		mechanism. One example is retrieving the recipe data from a web service which could throw an IOException and is handled with a try catch.

7.	Validation functionality	
	
		>This is implemented through the use jsf validators which perform checks on the data inputted on the login and register forms. 
		One such example is validating that an email is in the correct format when registering for an account.
		
8. 	Industry appropriate security features
	
		>This is implemented by using user login details to determine authentication and authorization.
		
9.	Design elements that make the application scalable

		>This application uses design patterns, stateless over stateful services, and a multi module approach that allow the project to scale.
	
10. A user-friendly, functional GUI

	>This application uses Bootstrap 4 along with Primefaces in order to provide a responsive, seamless end user experience

		
		
				